"use strict";(self.webpackChunkrptools_doc=self.webpackChunkrptools_doc||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"add-on-libraries-static-data","metadata":{"permalink":"/blog/add-on-libraries-static-data","source":"@site/blog/2021-11-11-add-on-static-data/index.mdx","title":"MapTool Add-On Libraries and Static Data","description":"This post describes a work in progress so details may change due to feedback. This is also","date":"2021-11-11T00:00:00.000Z","formattedDate":"November 11, 2021","tags":[{"label":"MapTool","permalink":"/blog/tags/map-tool"},{"label":"MapTool 1.11","permalink":"/blog/tags/map-tool-1-11"},{"label":"Libraries","permalink":"/blog/tags/libraries"}],"readingTime":1.185,"hasTruncateMarker":false,"authors":[{"name":"Craig Wisniewski","title":"MapTool Architect / Lead Developer","url":"https://github.com/cwisniew","key":"craigw"}],"frontMatter":{"slug":"add-on-libraries-static-data","title":"MapTool Add-On Libraries and Static Data","authors":["craigw"],"tags":["MapTool","MapTool 1.11","Libraries"]},"nextItem":{"title":"MapTool Add-On Libraries","permalink":"/blog/add-on-libraries"}},"content":":::caution\\nThis post describes a work in progress so details may change due to feedback. This is also\\nthe reason that the documentation is a bit sparse. Before creating any issues check the bottom of the \\npost for things still to be implemented. These features required a *HUGE* amount of behind the scene\\nchanges to how events, lib:tokens, and Assets work, so there will be a large amount of testing \\nthat needs to be done, I am expecting that there are still several bugs that I have not been able\\nto uncover yet with my testing. Any help testing would be grealy appreciated. \\n\\nIt should go without sayind please don\'t run your games with this yet.\\n:::\\n\\n## Retrieving static data from Add-Ons\\nYou can retrieve the static data that is zipped up in an add-on with the\\nfollowing macro script function.\\n\\n```\\ndata.getStaticData(namespace, path)\\n```\\n\\nIf this macro function is run from the add-on then it is able to retrieve \\nany file that is in the add-on.\\n\\nIf the macro function run from ouside of the add-on then it is only able to \\nretrieve files in the public/ directory and only if the Allow URI Access\\nflag is set.\\n\\nIf the path does not exist in the add-on (or a macro tries to read a file that \\nis not in the public/ directory when not run from the add-on) then an empty\\nstring will be returned."},{"id":"add-on-libraries","metadata":{"permalink":"/blog/add-on-libraries","source":"@site/blog/2021-11-07-add-on-libraries/index.mdx","title":"MapTool Add-On Libraries","description":"This post describes a work in progress so details may change due to feedback. This is also","date":"2021-11-07T00:00:00.000Z","formattedDate":"November 7, 2021","tags":[{"label":"MapTool","permalink":"/blog/tags/map-tool"},{"label":"MapTool 1.11","permalink":"/blog/tags/map-tool-1-11"},{"label":"Libraries","permalink":"/blog/tags/libraries"}],"readingTime":11.295,"hasTruncateMarker":false,"authors":[{"name":"Craig Wisniewski","title":"MapTool Architect / Lead Developer","url":"https://github.com/cwisniew","key":"craigw"}],"frontMatter":{"slug":"add-on-libraries","title":"MapTool Add-On Libraries","authors":["craigw"],"tags":["MapTool","MapTool 1.11","Libraries"]},"prevItem":{"title":"MapTool Add-On Libraries and Static Data","permalink":"/blog/add-on-libraries-static-data"},"nextItem":{"title":"MapTool Add-On Libraries (Old)","permalink":"/blog/add-on-libraries-old"}},"content":":::caution\\nThis post describes a work in progress so details may change due to feedback. This is also\\nthe reason that the documentation is a bit sparse. Before creating any issues check the bottom of the \\npost for things still to be implemented. These features required a *HUGE* amount of behind the scene\\nchanges to how events, lib:tokens, and Assets work, so there will be a large amount of testing \\nthat needs to be done, I am expecting that there are still several bugs that I have not been able\\nto uncover yet with my testing. Any help testing would be grealy appreciated. \\n\\nIt should go without sayind please don\'t run your games with this yet.\\n:::\\n\\n:::note\\nThis information supercedes the previous blog post.\\n:::\\n\\n# Add-On Libraries\\nMapTool 1.11 introduces add-on libraries which are intended to be an easier\\nto work with replacement for Lib:Tokens while also offering a lot more functionality.\\nLib:Tokens will still function the way that they currently do in MapTool 1.11 and future \\nversions, but will not be getting a lot of the new features that add-on libraries will have,\\nso it is recommended that framework developers transition to add-on libraries if supporting \\nMapTool 1.11 and above.\\n\\n\\nI have a very sparse and contrived add-on library I have been using for testing available at\\n[test-maptool-add-on-lib](https://github.com/cwisniew/test-maptool-add-on-lib)\\n\\n\\n\\n\\n## Format of add-on library files\\nAdd-On libraries can be shared in a .mtlib file. This file is a zip file with a specific\\nstructure and content. You can import these libraries with the File -> Import Add-On Library menu option.\\n\\n```\\nlibrary.json            <-- Configuration information for the add-on library\\nmts_properties.json     <-- Properties for macro script functions in library\\nevents.json             <-- Event definition for functions in the library\\nlibrary/                <-- Content of the library\\nlibrary/public          <-- Content of the library acessable via `lib:// URI`\\nlibrary/mtscript        <-- MTSCript files\\nlibrary/mtscript/public <-- MTSCript files that can be called via `[macro(): ]` outside of the library.\\n```\\n\\n\\n## format of the configuration file\\nThe library.json configuration file is a json file with the following structure.\\n```json\\n{\\n  \\"name\\": \\"test-library\\",\\n  \\"version\\": \\"1.0.0\\",\\n  \\"website\\": \\"www.rptools.net\\",\\n  \\"gitUrl\\": \\"github.com/RPTools/test-library\\",\\n  \\"authors\\": [ \\"RPTools Team\\" ],\\n  \\"license\\": \\"GPL 3.0\\",\\n  \\"namespace\\": \\"net.rptools.maptool.test-library\\",\\n  \\"description\\": \\"My new test library for stuff\\",\\n  \\"shortDescription\\": \\"test library\\",\\n  \\"allowsUriAccess\\": true\\n}\\n```\\n\\n## format of the events configuration file\\nThis json file contains which files should be run for certain events.\\n```json\\n{\\n   \\"events\\": [\\n      { \\"name\\": \\"onFirstInit\\", \\"mts\\": \\"onFirstInit\\" },\\n      { \\"name\\": \\"onInit\\", \\"mts\\": \\"onInit\\"}\\n   ],\\n   \\"legacyEvents\\": [\\n      { \\"name\\": \\"onInitiativeChangeRequest\\", \\"mts\\": \\"onInitiativeChangeRequest\\" },\\n      { \\"name\\": \\"onInitiativeChange\\", \\"mts\\": \\"onInitiativeChange\\" },\\n      { \\"name\\": \\"onTokenMove\\", \\"mts\\": \\"onTokenMove\\" },\\n      { \\"name\\": \\"onMultipleTokensMove\\", \\"mts\\": \\"onMultipleTokensMove\\"}\\n   ]\\n}\\n```\\nAdd ons do not respond to the \\"onCampaignLoad\\" event, instead they have 2 new events.\\n* onFirstInit - This is called only once, when the add on is added. Add the same add on a second time \\noverwriting the existing one it will *not* be called again unless the data for the add-on is removed first.\\n* onInit - This is called every time the campaign is loaded (including after the inital onFirstInit event), and \\non the client when sent to a client. This functionality is very much similar to onCampaignLoad.\\n\\nThe other events must be in the \\"legacyEvents\\" section, as the name implies these events are now considered to \\nbe legacy events, new events will be added in the future to replace these (these will not be removed though).\\n\\nCurrently only macro scripts are supported, in the future JavaScript scripts will also be supported. \\n\\n\\n## MTScript macros\\n* library/public is only exposed via lib:// URI if `allowsUriAccess` is set (see configuration file)\\n* MTScript macros must all end with the file extension .mts to be recognised.\\n* Any \\nOnly MTScript files in `content/mtscript/public` can be called using `[macro():]` from outside of the add-on\\n\\n\\nThe path of the file becomes that macroname for `[macro(): ]` the namespace of the add-on library\\nis used for the `@` portion.  \\n\\n\\nAdd-On libraries support both public and private macro functions. Public macro functions must \\nreside in the mtscript/public and can be called from anywhere (chat, other add-ons, lib:tokens, macro buttons).\\nYou can call them using the following syntax\\n`[macro(\\"mtscript1@lib:net.rptools.maptool.test-library\\")]` executes MTScript macro in the file \\n`content/mtscript/public/mtscript1.mts`.\\n:::note\\nThe \\"public/\\" is ommited from the macro name when calling it.\\nYou can also use subdirectories to organise your macros and would call them like \\n[macro(\\"subdir/script@lib:net.rptools.maptool.test-library\\")]\\n:::\\n\\nThe `@this` shorthand can also be used for calling a macro from within the same add-on, similar to how it works\\nfor lib:Tokens. For example\\n```[macro(\\"mtscript2@this\\")]```\\n\\n\\nMacro script files that are not in the \\"public/\\" directory can only be called from within the add-on itself or\\nby events.\\nGiven a library with the namespace ```net.mylib.addon``` with the following files.\\n```\\nmtsscript/func1.mts\\nmtsscript/public/func2.mts\\n```\\n\\n```[macro(\\"func1@lib:net.mylib.addon\\")]``` can be called from anywhere, but ```[macro(\\"func2@lib:net.mylib.addon\\")]```\\ncan only be called from a macro that is on the ```net.mylib.addon``` add-on.\\n\\n:::note \\nSince the \\"public/\\" is not required, if you have to files with the same name excluding the \\"public/\\" part, for example\\nmtscript/public/funct1.mts\\nmtscript/funct1.mts\\n\\nThen only the one in public/ will be able to be executed, you will not be able to call the other macro\\n:::\\n\\n\\nThe above works not just with ```[macro():]``  but the other places you would expect it to as well such as \\ndefineFunction() for user defined functions and macro links.\\n\\n### mts_properties.json file\\nThe mts_properties.json file contains property information about macro scripts, it is not required and currrently\\nonly allows you to set properties used in macro links.\\n\\n```json\\n{ \\n  \\"properties\\": [ \\n    {\\n      \\"filename\\": \\"public/auto_exec.mts\\",\\n      \\"autoExecute\\": true,\\n      \\"description\\": \\"Auto executable macro link\\"\\n    },\\n    {\\n      \\"filename\\": \\"public/myUDF.mts\\",\\n      \\"description\\": \\"My Test UDF in a drop in lib.\\"\\n    }\\n  ]\\n}\\n```\\n\\nWhere\\n* filename is the path of the file for the MacroScript function (excluding mtscript/).\\n* autoExecute determines if a macro link created for this macro will be auto executable or not.\\n* description is the description that will appear in the UDF listing, unlike Lib:Token this is just a plain string and not evaluated if it contains `[]`\\n\\n\\n\\n## public/ directory\\nThe contents of this directory are exposed as a lib:// URI  as long as the allowsUriAccess is set to true in the configuration file.\\nThe public directory part of the filename is discared, for example\\npublic/myhttml.html -> lib://net.myaddons.addon1/myhtml.html\\n\\nYou can add images to this directory and use src=\\"lib://\\" in image tags in HTML.\\nIt will eventually work with audio (probably aleady does but I haven\'t tested it yet so not claining it will yet :) )\\n\\nThese assets will be included correctly in the campaign file when saving, so you do not need to add them to image tables or\\nimage tokens or any other tricks to make sure that they are included.\\n\\n\\n## New MTScript Library functions\\n* library.listAddOnLibraries()            Lists the add on libraries\\n* library.getInfo(namespace)              Gets information about a library (either add on or lib:token)\\n* library.listTokenLibraries(namespace)   Lists the Lib:tokens in the campaign\\n* library.getContents(namespace)          Lists the contents of a library (trusted)\\n* library.removeAddOn(namepsace)          Removes an add-on (trusted) (used for testing only, probably wont make it into release)\\n* library.removeAllAddOns()               Removes all add-ons (trusted) (used for testing only, probably wont make it into release)\\n\\n\\n## Add-On Libraries and Data\\nAs Add Ons do not live on a token there are no token properties for them. Instead there has been a new\\narea created for storing data that is a lot more flexible -- and will allow data to be stored agisnt other\\nentities like maps in the future.\\nThe existing lib property functions below have been modified to work with this new data store if called with\\nan add-on as the target.\\n* setLibProperty\\n* getLibProperty\\n* getLibPropertyNames\\n* getMatchingLibProperties\\n\\nThere are some differences to be aware of when using lib property support for add-ons.\\n* The name is case sensitive, unles tokens where it is not case sensitive.\\n* The values stored do not need to be be converted to/from strings like they do with lib:tokens so\\nin many cases for large json values this should result in a speed improvement.\\n* The default properties list for the campain are not present for Add-Ons as they are not tokens unlike Lib:Tokens\\n\\n\\n### Macro functions\\nThere are some macro functions that will be included in the alpha build for testing purposes that\\nwill allow you to clear/get/edit the data store. The data store is not intended to be used like this\\nfrom macros so they will not be in the release build -- there will probably be something similar in 1.12\\nthough. \\n* data.createNamespace(type, namespace) - Creates namespace for data\\n* data.listNamespaces(type) - Lists the created namespaces for a type\\n* data.setData(type, namespace, name, value) - Sets a data value in the store\\n* data.getData(type, namespace, name) - Gets a data value from the store\\n* data.listData(type, namespace) - Lists the data stored in a namespace\\n* data.clearData(type, namespace, name) - Clears the data for the given name in the data store\\n* data.clearNamespace(type, namespace) - Clears all the data from a namespace\\n* data.clearAllData() - Clears all the data in the data store\\n\\nFor add-ons the type will be \'addon:\' and the namespace will be the namespace of the add-on.\\n\\n\\n## Converting Lib:tokens\\nThe token popup menu includes a way to export your existing library tokens to an add-on.\\nThis is useful for starting the conversion of an existing token library to an add-on but in all but\\nthe simplest lib:tokens you will want edit the extracted data.\\n\\n\\n\\n\\n![Convert and Export Lib:Tokens](./export-lib-token.png)\\n\\n### Things you will want to change\\n* You should probably change the namespace in the library.json file to something that is unlikely to\\nconflict with other users. Its a good practice to use a reversed hostname + add on name for this.\\n* All macros (except event based ones) are created in mtscript/public with the pattern macro_{number>.mts, \\nthis is because macro names have many things that might make them invalid -- or worse dangerous -- filenames.\\nThere is a macro_script_map.txt file saved in the top level which contains the names of your macros and the \\nfilename that they were saved in.\\n* Not all macro buttons on lib:tokens always contain MT Script macros, they are used for CSS etc as well so\\nyou will probably want to rename and move them to the library/public/ directory.\\n* The onCampaignLoad macro will be saved as onInit \\n* All properties are saved in the library/properties directory. These are saved with the names prop_{number}.txt\\nand a mapping file prop_file_map.txt is created to map these. (this may change slightly when data access\\nis introduced, more the location)\\n\\n:::note\\nAfter doing the above you should *REALLY* take the opportunity to source control your Add-On... \\n:::\\n\\n## Things not yet implemented but will be (so dont create issues for these or I will just close them)\\nThe things detailed below will probably only be implemented for add-ons and there will be no equivalent\\nfunctionality for lib:tokens.\\n\\n### Will be added/addressed in 1.11\\n* There is currenlty no way to properly retrieve json or other data files as data, once this is\\nadded its recommended to store large static data here rather than in the data store as then it will\\nonly need to be sent to client once which can cache it\\n* There is currently no way to remove add-ons\\n* There is only minimal checking of data when importing add-ons so error reporting is not great.\\n* More documentation\\n\\n### Possibly will be added/addressed in 1.11 depends on available time\\n* Many file types like text/markdown etc are allowed in tate he library but the functions to use them dont yet exist\\n* Way to create user defined functions through property file (so you dont have to call defineFunction in onInit)\\n\\n\\n### Probably added/addressed in 1.12\\n* No Management UI yet\\n* Expanding of JavaScript API which will make this much more useful will be part of another change.\\n* Displaying readme markdown file\\n* Displaying more detailed license information \\n* Start of support for Add-Ons to to be able to replace \\"standard\\" functionality, first things wil be\\n  * Add-On support for stat sheets (on mouseover on tokens)\\n  * Add-On support for map selection UI\\n\\n\\n### Probably added/addressed in 1.13\\n* Ability to check URL for later version and update from that (most likely github to start with)\\n* Link Maps to required Add-Ons when exporting/importing\\n* Dcoumentation / Procuedures for creating a GitHub release for your Add-On.\\n* The data store could be slightly smatter about large text blocks that remain static and attempt to\\n cache them\\n\\n\\n### Questions I need feedback on\\n* Add-Ons lack a built in UI, Lib:Tokens have the macro buttons but Add-Ons dont. Better UIs can\\nnow be created for Add-Ons using frame5/dialog5 with the lib:// URL support (we can expand that to added\\nother things that are needed) but do we also need something similar to what lib:tokens have.\\n\\n\\n## Other miscellaneous stuff / insanity\\nOne thing to realise is this change allows serveral things that are not immediately obvious. For example,\\nexperiment with frame5/dialog5 and lib:// URI support and ability to store images, you would be surprised\\nhow close it is to devloping a standard web site. As a proof of concept I have even been able to get \\na small React App written in TypeScript running realtively easily by using webpack to bundle it and copy\\nit into the public directory. (Note the SVG for the beginner React app doesn\'t work correctly but \\nreplacing it with a png works)."},{"id":"add-on-libraries-old","metadata":{"permalink":"/blog/add-on-libraries-old","source":"@site/blog/2021-10-19-add-on-libraries-old/index.mdx","title":"MapTool Add-On Libraries (Old)","description":"Note: This post describes a work in progress so details may change due to feedback. This is also","date":"2021-10-19T00:00:00.000Z","formattedDate":"October 19, 2021","tags":[{"label":"MapTool","permalink":"/blog/tags/map-tool"},{"label":"MapTool 1.11","permalink":"/blog/tags/map-tool-1-11"},{"label":"Libraries","permalink":"/blog/tags/libraries"}],"readingTime":4.825,"hasTruncateMarker":false,"authors":[{"name":"Craig Wisniewski","title":"MapTool Architect / Lead Developer","url":"https://github.com/cwisniew","key":"craigw"}],"frontMatter":{"slug":"add-on-libraries-old","title":"MapTool Add-On Libraries (Old)","authors":["craigw"],"tags":["MapTool","MapTool 1.11","Libraries"]},"prevItem":{"title":"MapTool Add-On Libraries","permalink":"/blog/add-on-libraries"},"nextItem":{"title":"Lib:Tokens URI access","permalink":"/blog/lib-token-uri"}},"content":"**Note:** This post describes a work in progress so details may change due to feedback. This is also\\nthe reason that the documentation is a bit sparse. Before creating any issues check the bottom of the \\npost for things still to be implemented. Also the current code doesn\'t do much checking for the format\\nof the config/property files this will be improved.\\n\\n\\n# Add-On Libraries\\nMapTool 1.11 introduces add-on libraries which are intended to be an easier\\nto work with replacement for Lib:Tokens while also offering a lot more functionality.\\nLib:Tokens will still function the way that they currently do in MapTool 1.11 and future \\nversions, but will not be getting a lot of the new features that add-on libraries will have,\\nso it is recommended that framework developers transition to add-on libraries if supporting \\nMapTool 1.11 and above.\\n\\nI have a very sparse and contrived add-on library I have been using for testing available at\\n[test-maptool-add-on-lib](https://github.com/cwisniew/test-maptool-add-on-lib)\\n\\n\\n## Format of add-on library files\\nAdd-On libraries can be shared in a .mtlib file. This file is a zip file with a specific\\nstructure and content. You can import these libraries with the File -> Import Add-On Library menu option.\\n\\n```\\nlibrary.json            <-- Configuration information for the add-on library\\nmts_properties.json     <-- Properties for macro script functions in library\\nlibrary/                <-- Content of the library\\nlibrary/public          <-- Content of the library acessable via `lib:// URI`\\nlibrary/mtscript        <-- MTSCript files\\nlibrary/mtscript/public <-- MTSCript files that can be called via `[macro(): ]` outside of the library.\\n```\\n\\n* library/public is only exposed via lib:// URI if `allowsUriAccess` is set (see configuration file)\\n* MTScript macros must all end with the file extension .mts to be recognised.\\n* Only MTScript files in `content/mtscript/public` can be called using `[macro():]` from outside of the add-on\\n\\n## format of the configuration file\\nThe library.json configuration file is a json file with the following structure.\\n```json\\n{\\n  \\"name\\": \\"test-library\\",\\n  \\"version\\": \\"1.0.0\\",\\n  \\"website\\": \\"www.rptools.net\\",\\n  \\"gitUrl\\": \\"github.com/RPTools/test-library\\",\\n  \\"authors\\": [ \\"RPTools Team\\" ],\\n  \\"license\\": \\"GPL 3.0\\",\\n  \\"namespace\\": \\"net.rptools.maptool.test-library\\",\\n  \\"description\\": \\"My new test library for stuff\\",\\n  \\"shortDescription\\": \\"test library\\",\\n  \\"allowsUriAccess\\": true\\n}\\n```\\n\\n\\n\\n## MTScript macros\\nThe name of the file becomes that macroname for `[macro(): ]` the namespace of the add-on library\\nis used for the `@` portion.  For example:\\n\\nAdd-On libraries support both public and private macro functions. Public macro functions must \\nreside in the mtscript/public and can be called from anywhere (chat, other add-ons, lib:tokens, macro buttons).\\nYou can call them using the following syntax\\n`[macro(\\"mtscript1@net.rptools.maptool.test-library\\")]` executes MTScript macro in the file \\n`content/mtscript/public/mtscript1.mts`.\\n:::note\\nThe \\"public/\\" is ommited from the macro name when calling it.\\nYou can also use subdirectories to organise your macros and would call them like \\n[macro(\\"subdir/script@net.rptools.maptool.test-library\\")]\\n:::\\n\\nThe `@this` shorthand can also be used for calling a macro from within the same add-on, similar to how it works\\nfor lib:Tokens. For example\\n```[macro(\\"mtscript2@this\\")]```\\n\\n\\nMacro script files that are not in the \\"public/\\" directory can only be called from within the add-on itself.\\nGiven a library with the namespace ```net.mylib.addon``` with the following files.\\n```\\nmtsscript/func1.mts\\nmtsscript/public/func2.mts\\n```\\n\\n```[macro(\\"func1@net.mylib.addon\\")]``` can be called from anywhere, but ```[macro(\\"func2@net.mylib.addon\\")]```\\ncan only be called from a macro that is on the ```net.mylib.addon``` add-on.\\n\\n:::note \\nSince the \\"public/\\" is not required, if you have to files with the same name excluding the \\"public/\\" part, for example\\nmtscript/public/funct1.mts\\nmtscript/funct1.mts\\n\\nThen only the one in public/ will be able to be executed, you will not be able to call the other macro\\n:::\\n\\n\\nThe above works not just with ```[macro():]``  but the other places you would expect it to as well such as \\ndefineFunction() for user defined functions and macro links.\\n\\n### mts_properties.json file\\nThe mts_properties.json file contains property information about macro scripts, it is not required and currrently\\nonly allows you to set properties used in macro links.\\n\\n```json\\n{ \\n  \\"properties\\": [ \\n    {\\n      \\"filename\\": \\"public/auto_exec.mts\\",\\n      \\"autoExecute\\": true,\\n      \\"description\\": \\"Auto executable macro link\\"\\n    },\\n    {\\n      \\"filename\\": \\"public/myUDF.mts\\",\\n      \\"description\\": \\"My Test UDF in a drop in lib.\\"\\n    }\\n  ]\\n}\\n```\\n\\nWhere\\n* filename is the path of the file for the MacroScript function (excluding mtscript/).\\n* autoExecute determines if a macro link created for this macro will be auto executable or not.\\n* description is the description that will appear in the UDF listing, unlike Lib:Token this is just a plain string and not evaluated if it contains `[]`\\n\\n\\n\\n## public/ directory\\nThe contents of this directory are exposed as a lib:// URI  as long as the allowsUriAccess is set to true in the configuration file.\\nThe public directory part of the filename is discared, for example\\npublic/myhttml.html -> lib://net.myaddons.addon1/myhtml.html\\n\\nYou an add images to this directory and use src=\\"lib://\\" in image tags in HTML.\\nIt will eventually work with audio (probably aleady does but I haven\'t tested it yet so not claining it will yet :) )\\n\\n\\n## New MTScript functions\\n* library.listAddOnLibraries()            Lists the add on libraries\\n* library.getInfo(namespace)              Gets information about a library (either add on or lib:token)\\n* library.listTokenLibraries(namespace)   Lists the Lib:tokens in the campaign\\n* library.getContents(namespace)          Lists the contents of a library (trusted)\\n* library.removeAddOn(namepsace)          Removes an add-on (trusted) (used for testing only, probably wont make it into release)\\n* library.removeAllAddOns()               Removes all add-ons (trusted) (used for testing only, probably wont make it into release)\\n\\n\\n## Things not yet implemented but will be (so dont create issues for these or I will just close them)\\n* libProperty acces, including listing, setting, gettting\\n* No UI yet \\n* No onCampaignLoad etc events yet.\\n* There is currenlty no way to access files not in public/ or mtscript/\\n* Many file types like text/markdown etc are allowed in the library but the functions to use them dont yet exist\\n* Expanding of JavaScript API which will make this much more useful will be part of another change."},{"id":"lib-token-uri","metadata":{"permalink":"/blog/lib-token-uri","source":"@site/blog/2021-10-02-lib-token-uri/index.mdx","title":"Lib:Tokens URI access","description":"Issues with HTML/CSS/JavaScript Prior to MapTool 1.10","date":"2021-10-02T00:00:00.000Z","formattedDate":"October 2, 2021","tags":[{"label":"MapTool","permalink":"/blog/tags/map-tool"},{"label":"lib:tokens","permalink":"/blog/tags/lib-tokens"},{"label":"MapTool 1.10","permalink":"/blog/tags/map-tool-1-10"}],"readingTime":4.19,"hasTruncateMarker":false,"authors":[{"name":"Craig Wisniewski","title":"MapTool Architect / Lead Developer","url":"https://github.com/cwisniew","key":"craigw"}],"frontMatter":{"slug":"lib-token-uri","title":"Lib:Tokens URI access","authors":["craigw"],"tags":["MapTool","lib:tokens","MapTool 1.10"]},"prevItem":{"title":"MapTool Add-On Libraries (Old)","permalink":"/blog/add-on-libraries-old"},"nextItem":{"title":"Player Databases","permalink":"/blog/player-databases"}},"content":"## Issues with HTML/CSS/JavaScript Prior to MapTool 1.10\\n\\nPrior to MapTool 1.10 creating HTML pages is unnecessary cumbersome.\\nTo create HTML dialogs, frames, and overlays you use the following roll options.\\n\\n- `[frame(): { } ]`\\n- `[frame5(): { } ]`\\n- `[dialog(): { } ]`\\n- `[dialog5(): { } ]`\\n- `[overlay(): { } ]`\\n\\nThe HTML is included in the `[ ]` which means it has to processed by the MTScript parser. This has both benefits and drawbacks.\\nThe main benefit is that you can use `[ ]` to execute MTScript elements as a form of templating the HTML, for example\\n\\n```\\n[frame(\\"test): {\\n    [r: getName() ]\\n}]\\n```\\n\\nThe major drawback is that everything included must be able to pass through the MTScript parser, often this will not be the case especially where CSS or JavaScript are concerned.\\nYou can work around this problem by using macros functions to fetch text from macro, for example:\\n\\n```\\n[frame5(\\"test\\"): {\\n\\t[r: getMacroCommand(number(getMacroIndexes(\\"test/test.html\\"))) ]\\n}]\\n```\\n\\n## Changes in MapTool 1.10\\n\\nIn MapTool 1.10 there is a change that allows you to access properties and macros on Lib:Tokens via a URI of the form\\n\\n- lib://_&lt;token name&gt;_/macro/_&lt;macro name&gt;_\\n- lib://_&lt;token name&gt;_/property/_&lt;property name&gt;_\\n\\n:::note\\nBy default the text fetched using the URI is cached, if you make changes to the content it will not be reflected until you restart MapTool. To work around this you can add the `cachelib=false` query string as show in examples later on in this post.\\n:::\\n\\nWhere _&lt;token name&gt;_ is the name of the Lib:Token after the Lib: prefix, for example Lib:HTMLTest would be HTMLTest\\n\\n### Allowing URI access\\n\\nThere are no special requirements on ownership for the Lib:Token, to allow URI access to Lib:Token properties and macros, anyone will be able to access these values via a URI if the \\"Allow URI Access\\" flag needs is set, you can do this via the edit token dialog.\\n![Allow URI access](./allow-uri-access.png)\\n\\nor the `setAllowsURIAccess()` macro function.\\n\\n:::note Reserved names\\n\\n<details>\\n  <summary>\\n    Some names are reserved for future internal usage and you will not be able\\n    set the \\"Allows URI Access\\" flags on Lib:Tokens{\\" \\"}\\n  </summary>\\n  <div>\\n    Reserved names are: Lib tokens with the following names (after the lib:\\n    part)\\n    <ul>\\n      <li> rptools </li>\\n      <li> maptool </li>\\n      <li> maptools (because people often call it maptools) </li>\\n      <li> internal </li>\\n      <li> builtin </li>\\n      <li> standard </li>\\n    </ul>\\n    Lib tokens starting with the following names (after the lib: part)\\n    <ul>\\n      <li> rptools. </li>\\n      <li> maptool. </li>\\n      <li> maptools. (because people often call it maptools) </li>\\n      <li> tokentool. </li>\\n      <li> net.rptools. </li>\\n      <li> internal. </li>\\n      <li> _ </li>\\n      <li> builtin. </li>\\n      <li> standard. </li>\\n      <li> . </li>\\n    </ul>\\n  </div>\\n</details>\\n:::\\n\\n### Macro functions\\n\\nTwo new MTScript functions have been added that allow you to set or get the \\"Allows URI access\\" flag for a token. These can only be run from a trusted macro.\\n\\n- `getAllowsURIAccess([<token name>], [<map name>])`\\n- `setAllowsURIAccess(<0|1>, [<token name>, [<map name>])`\\n\\n### Uses for lib:// URIs\\n\\nLib:// URIs are useful for both CSS and JavaScript inclusion in HTML files, creating frames/dialogs/overlays with HTML, and the `js.evalURI()` MTScript functions.\\n\\n#### Including JavaScript and CSS in HTML using a lib:// URI\\n\\n```html\\n<html>\\n  <head>\\n    <link\\n      rel=\\"stylesheet\\"\\n      href=\\"lib://HTMLTest/macro/test/test.css?cachelib=false\\"\\n    />\\n  </head>\\n  <body>\\n    <h1>This is a test</h1>\\n    <div id=\\"test1\\" />\\n    <script src=\\"lib://HTMLTest/macro/test/test.js?cachelib=false\\"><\/script>\\n    <img src=\\"asset://87f4e9bfa4f1f3db250b57b3599fa4e9\\" />\\n  </body>\\n</html>\\n```\\n\\nThis will include CSS from the macro called test/test.css and the JavaScript from a macro called test/test.js on the Lib:HTMLTest token.\\n\\n#### Creating frames/dialogs/overlays using a lib:// URI\\n\\nThere are also new MTScript functions that allow you to create frames/dialogs/overlays by passing a lib:// URI which contains the HTML.\\nThese are\\n\\n- `html.dialog(<dialog name>, <libURI>, [<options>])`\\n- `html.dialog5(<dialog name>, <libURI>, [<options>])`\\n- `html.frame(<frame name>, <libURI>, [<options>])`\\n- `html.frame5(<frame name>, <libURI>, [<options>])`\\n- `html.overlay(<overlay name>, <libURI>, [<options>])`\\n\\nThe optional \\"options\\" argument contains the same arguments and format as the frame/dialog/overlay [roll options](https://wiki.rptools.info/index.php/frame5_%28roll_option%29)\\n\\n### Relative paths\\nWhen using the following functions\\n- `html.dialog5(<dialog name>, <libURI>, [<options>])`\\n- `html.frame5(<frame name>, <libURI>, [<options>])`\\n- `html.overlay(<overlay name>, <libURI>, [<options>])`\\n\\nThe URLs in the HTML file can also be specified using relative paths, for example\\nGiven \\n\\n![Relative paths macros](./relative-path-macros.png)\\n\\nIf the HTML is loaded from `test/test.html` you can use relative paths for the other macros as below\\n\\n```html\\n<html>\\n<head>\\n\\t<link rel=\\"stylesheet\\" href=\\"./test.css?cachelib=false\\">\\n</head>\\n<body>\\n\\t<h1>This is a test</h1>\\n\\t<div id=\'test1\'/>\\n\\t<script>\\n\\t\\tdocument.getElementById(\'test1\').innerHTML = \'...This is a test!\';\\n\\t<\/script>\\n\\t<script src=\\"./test.js?cachelib=false\\"><\/script>\\n\\t<img src=\\"asset://87f4e9bfa4f1f3db250b57b3599fa4e9\\"/>\\n\\t<a href=\\"./test2.html\\">test2</a>\\n</body>\\n```\\n\\nThis will even work for hyperlink navigation as seen in the link to `./test2.htlm` aboove\\n\\n![Relative Path Navigation Example](./relative-path-example.gif)\\n\\n\\n\\n#### Running JavaScript from a lib:// URI\\n\\nIn addition to being able to include JavaScript in HTML via the `<script>` tag, lib:// URIs can be used to execute JavaScript via the `js.evalUI()`macro function.\\n\\n- `js.evalURI(<namespace>, <libURI>, [arg1, ... argN])`\\n\\nWhere\\n\\n- _&lt;namespace&gt;_ is the namespace of the JavaScript context to run the script in.\\n- _&lt;libURI&gt;_ is the lib:// URI to fetch the JavasScript from.\\n- [arg1, ... argN] is a comma-separated list of arguments to be passed to the script"},{"id":"player-databases","metadata":{"permalink":"/blog/player-databases","source":"@site/blog/2021-09-30-player-database/index.md","title":"Player Databases","description":"Authentication types","date":"2021-09-30T00:00:00.000Z","formattedDate":"September 30, 2021","tags":[{"label":"MapTool","permalink":"/blog/tags/map-tool"},{"label":"Authentication","permalink":"/blog/tags/authentication"},{"label":"MapTool 1.10","permalink":"/blog/tags/map-tool-1-10"}],"readingTime":6.58,"hasTruncateMarker":false,"authors":[{"name":"Craig Wisniewski","title":"MapTool Architect / Lead Developer","url":"https://github.com/cwisniew","key":"craigw"}],"frontMatter":{"slug":"player-databases","title":"Player Databases","authors":["craigw"],"tags":["MapTool","Authentication","MapTool 1.10"]},"prevItem":{"title":"Lib:Tokens URI access","permalink":"/blog/lib-token-uri"},"nextItem":{"title":"Speech and Thought Bubbles","permalink":"/blog/token-speech-bubbles"}},"content":"## Authentication types\\nPrior to version 1.10 MapTool only supported a single method of authentication which is role based authentication. Each Role (GM and Player) has a password and any client that connects and authenticates with either of these passwords gets that role. There is no restriction player names other than everyone has to have a unique name.\\n\\nIn MapTool 1.10 there are three authentication methods.\\n* Role based\\n* Player specific passwords\\n* Public Key\\n\\n## Using Player Specific Authentication\\nFor player specific passwords and public keys authentication a password file must be used as these require that the name of the players are fixed so that they can be matched to the specific password or public key. When starting the server you can specify that a password file is used.\\n![Start Server Dialog](./start-server-dialog.png)\\n\\nThis will load the password file or create a new one if it doesn\'t exist.\\n\\n\\n## Clients Connecting With Public Keys\\nSo that the user does not have to type in a password that will not be used they can check \\"connect using public Key\\" from the connect to server dialog.\\n\\n![Connect To Sever Dialog](./connect-using-public-key.png)\\n\\nThey do not have to check this box as if the server requests the client attempts to authenticates via public key the client will do so even if the user has specified a password. If this value is checked the only way the client can authenticate is via public key so any password in the password text field will be ignored. \\n\\n\\n## Adding, Editing, or Removing Players\\nThe menu option to edit player passwords is under the file menu.\\n![Player Database Menu Option](./player-database-menu.png)\\n\\nThis opens the player database dialog which can be used to add, edit, and remove players. This dialog shows the following information\\n\\n### Player Database\\n![Edit Player Dialog](./player-database.png)\\n* Player name\\n* Role, Player or GM\\n* Authentication Type, Password or Public Key\\n* Is the player Blocked\\nBlocked players will not be able to log in. When they try to connect they will get a message with a reason that they are blocked.\\n\\n:::note\\nNew, Added, or Modifications to players take effect immediately but the changes will not be written to the password file until this dialog is closed (either with Ok button or dialog close button). This is so that the file will not be continually overwritten many times when making several changes at once.\\n:::\\n\\n\\n### Adding or Editing Player\\nClicking on the Edit or Add button will open a dialog where you can provide the player details.\\n![Edit Player Dialog](./edit-player-dialog.png)\\nThis dialog is used to provide the information required for the player database entry.\\n* Player Name (only editable for Add)\\n* Role, Player or GM\\n* If the player has been blocked from logging in, and if so the reason why\\n* Authentication Type, password or public key\\n* Player Password (only if authentication type is password)\\n* Public Key (only if authentication type is public key)\\n\\nThe password is hashed which is a one way operation, so you will not be able to see a players password so if you and the player forget it you will have to change it to a new one.\\n\\nIts recommended that if you want to use player specific authentication you use public keys as that way neither you or the player will need to remember the password. You can add more than one public key in the public key text field so you can easily support players who have multiple computers.\\n\\nIf you still prefer to use a password over a public key it is **strongly** recommended you use the Generate New Password button so that no one is sharing passwords they may be using elsewhere.\\n\\n:::note\\nSetting a plyer to blocked will not kick the player, it will only stop them from attempting to connect to the server. You will need to kick the player if you also want to remove them immediately. At this time kicking a blocked player will not send them the reason that they are blocked/kicked but will do so in a future version.\\n:::\\n\\n## Obtaining The Players Public Key\\nThere is a new Authentication tab on the preferences dialog which contains the public key for your client. If you have multiple machines each will have its a different public key, its also possible if you have multiple versions installed with different data directories then these may also have different public keys.\\n\\n![Players Public Key](./public-key.png)\\n\\nYou can regenerate your public key but if you do so then you will not be able to connect to any server that has your old public key so you will need to ensure you let the person running the server know that your public key has been changed. \\n\\nYour public key is also stored in the file `.maptool-rptools/config/public.key` (or equivalent data directory).\\n\\n**Warning:** Your private key is also stored in this directory, do not share this with anyone as if they have both your public and private key they will be able to log in as you on other servers your public key is registered with.\\n\\n\\n## Password File\\nThe location of the password file -- assuming the standard data directory -- is `.maptool-rptools/config/passwords.json` always ensure that you make a backup before editing it as if you make mistakes and you don\'t have a backup you may need to regenerate new passwords for all players. Also never update the password file while the server is running. Public keys for players are stored in the the `.maptool-rptools/config/keys` directory. If you use multiple computers or share GM duties with someone else you can copy the `passwords.json` file and `keys` directory and place them in the same directory on the second computer as they contain nothing specific to the computer it was generated on. You should still endeavour to make sure that this password file is shard with as little number of people as possible. Also **never** use passwords that you have used anywhere else in this file even though they are hashed. If you must use passwords use the button to generate new passwords, but you should prefer public keys!\\n\\n### Format of the Password File\\nThe password file uses json format. \\n```json\\n  \\"passwords\\": [\\n    {\\n      \\"username\\": \\"p1\\",\\n      \\"password\\": \\"/49vX2/i/5YhQZTaalYnoA\\",\\n      \\"salt\\": \\"DZAp3sKZSY/vWuLfTG26mhQbOx5PLNT0tRdNvTNMn8KjDlY3jJg180ZBN56ehfkygOk6v0CgySZaufGkOKj7RqOwudzoWZhtNGSabkbI4s85TG7Ecfz8HQQRfIi1XtWrlqkrnuiyD8zQFg9zNr0xvQlUwzL5UOK7emt/xPr2QfU\\",\\n      \\"role\\": \\"Player\\"\\n    },\\n    {\\n      \\"username\\": \\"sp1\\",\\n      \\"publicKeys\\": [\\n        \\"pk1.key\\"\\n      ],\\n      \\"role\\": \\"Player\\"\\n    },\\n    {\\n      \\"username\\": \\"g1\\",\\n      \\"password\\": \\"9SH7OrqlXyRMrSXy2fQHaw\\",\\n      \\"salt\\": \\"LOWXSGZ5tNeCwVpzNFuK/4EC+9jHMPmgpZ3Q05kElZyJKSWk0dGQOuZWADH2ZYAs4UvN3DVczMbAO6Dm5+NdnvsZsb/SnZ/xEM0QZ5yvmOh0bGjWEHwqTwFBbRUrzlpzy1nNKdJU8e7G2qWmaLUCDSV5Ut50l9aBfeL29d5btLA\\",\\n      \\"role\\": \\"GM\\"\\n    },\\n    {\\n      \\"username\\": \\"Test4\\",\\n      \\"password\\": \\"ZyZpHxUR18RdhQpFk4n+jA\\",\\n      \\"salt\\": \\"SucHGWjcbeDcegZo8A6jekB56iICulF3OtbcomJ+MsShuhKrrls2ZE+T25aTj/xAFu5wZlfE129LgBYvw/C3q2zeEyvjEmXprq5rzW8+c8VaXIRPSHbz5ursX5pRL8qcxbsCm4RFozld6R9/P6+IC3TC3DWoq6CRsvzHpIO2Nnc\\",\\n      \\"role\\": \\"Player\\"\\n    },\\n    {\\n      \\"username\\": \\"Test3\\",\\n      \\"password\\": \\"EyFrs4pM6Euy5zQLHrFoOw\\",\\n      \\"salt\\": \\"Fpvg/PJZGIp7N68OmxMaEGOA1mo4vdg7KoRUDik3Q6P6VovI0YOOdNi3iyo9WgcuukhXjlSoxBqG3Cz/hNQRVVgsXdGwcb86K20imFBbfyzpuNt3a/51u9HTQuYoE8FzzNsTdCI/VPmyQjgvP+AwSYT0i7m/GRXdtugoOWGnDgY\\",\\n      \\"role\\": \\"Player\\"\\n    }\\n  ]\\n}\\n```\\n\\nA player entry that uses a public key will look like the following\\n```json\\n    {\\n      \\"username\\": \\"sp1\\",\\n      \\"publicKeys\\": [\\n        \\"pk1.key\\"\\n      ],\\n      \\"role\\": \\"Player\\"\\n    }\\n```\\nThe value in `publicKeys` is the name of the file in the `keys` directory that contains the public keys for the player.\\n\\nA player entery that uses a password will look like the following\\n```json\\n    {\\n      \\"username\\": \\"Test3\\",\\n      \\"password\\": \\"EyFrs4pM6Euy5zQLHrFoOw\\",\\n      \\"salt\\": \\"Fpvg/PJZGIp7N68OmxMaEGOA1mo4vdg7KoRUDik3Q6P6VovI0YOOdNi3iyo9WgcuukhXjlSoxBqG3Cz/hNQRVVgsXdGwcb86K20imFBbfyzpuNt3a/51u9HTQuYoE8FzzNsTdCI/VPmyQjgvP+AwSYT0i7m/GRXdtugoOWGnDgY\\",\\n      \\"role\\": \\"Player\\"\\n    }\\n```\\nThe `password` field contains the hashed password for the player, the `salt` field is a randomised value that is used in the function used hash the password.\\n\\nIf you want to add players you will not be able to -- or be expected to -- generate the hashed password and salt instead you can instead specify the plaintext password and no salt like the following.\\n```json\\n    {\\n      \\"username\\": \\"Test3\\",\\n      \\"password\\": \\"You-Are-Using-A-Random-Password-Arent-You?\\",\\n      \\"role\\": \\"Player\\"\\n    }\\n```\\nThen the next time the server is started this file will be read and the password will be hashed and the file overwritten to only contain hashed passwords and the salt for the password. This will also generate a `passwords.json.backup` before overwriting, ensure that you delete this file after testing as it contains then non hashed version of the passwords. But you did remember to use randome passwords and not passwords that you use elsehwere correct?"},{"id":"token-speech-bubbles","metadata":{"permalink":"/blog/token-speech-bubbles","source":"@site/blog/2021-09-29-speech-name/index.md","title":"Speech and Thought Bubbles","description":"Callouts","date":"2021-09-29T00:00:00.000Z","formattedDate":"September 29, 2021","tags":[{"label":"MapTool","permalink":"/blog/tags/map-tool"},{"label":"speech-bubble","permalink":"/blog/tags/speech-bubble"},{"label":"MapTool 1.10","permalink":"/blog/tags/map-tool-1-10"}],"readingTime":2.745,"hasTruncateMarker":false,"authors":[{"name":"Craig Wisniewski","title":"MapTool Architect / Lead Developer","url":"https://github.com/cwisniew","key":"craigw"}],"frontMatter":{"slug":"token-speech-bubbles","title":"Speech and Thought Bubbles","authors":["craigw"],"tags":["MapTool","speech-bubble","MapTool 1.10"]},"prevItem":{"title":"Player Databases","permalink":"/blog/player-databases"}},"content":"## Callouts\\n\\nOne of the new additions in MapTool 1.10 is the ability to override the name that appears in the speech or thought bubble callouts in MapTool.\\n\\nFor those that are not already familiar with the functionality MapTool provides the ability to display the following callouts on all clients\\n* Pointer - Spacebar<br/>\\n![Pointer](./pointer.png)\\n\\n* Speech Bubble - Control + Spacebar<br/>\\n![Speech Bubble](./speech.png)\\n\\n* Thought Bubble - Shift + Spacebar<br/>\\n![Thought Bubble](./thought.png)\\n\\n* Pointing Finger - Control + Shift +  Spacebar<br/>\\n![Pointing Finger](./finger-point.png)\\n\\n\\n\\n## Setting the Speech/Thought Callout Name\\n\\nPreviously these callouts always render the name of the player regardless of where the callout is or impersonation status.\\nIn MapTool 1.10 tokens can have a speech name, this can affect the name displayed for both thought and speech bubbles when the mouse pointer is over the token, or the token is impersonated. \\n\\nThis can be set when dragging a new token on to the map<br/>\\n![New Token Dialog](./new-token-dialog.png)\\n\\nOr by editing existing tokens.\\n![Edit Token Dialog](./edit-token-dialog.png)\\n\\nOr via macro.<br/>\\n`setSpeechName(\\"Speech bubble name\\", tokenId)`\\n\\n## Related Macros\\nThere are two related macros\\n```getSpeechName()``` which returns the speech name for the current token. There is also a trusted variant ```getSpeechName(tokenId)``` which will return the speech name for the token with the specified id.\\n\\n```setSpeechName(SpeechBubbleName)``` sets the speech name for the current token. There is also a trusted variant ```setSpeechName(SpeechBubbleName, tokenId)``` which will set the speech name for the token with the specified id.\\n\\n\\n## Examples\\nIn the following examples the speech and thought bubbles look different to previous versions as another fix in MapTool 1.10 is to size them dynamically so large names wont be rendered outside of the bubbles.\\n\\nNo impersonated token or token under mouse\\n![No Token](./anon.png)\\n\\nToken with Speech Name\\n![Token With Speech Name](./red-dragon.png)\\n\\nToken with really long speech name\\n![Really Long Name](./captain-spalding.png)\\n\\nBoth the eagle and the Dragon have a speech name\\n![Impersonated](./eagle.png)\\n\\nMage and Familiar with Speech Name, mouse over Mage\\n![Mage](./mage-thought.png)\\n\\nMage and Familiar with Speech Name, mouse over Familiar\\n![Mage](./mage-familiar-thought.png)\\n\\n\\n\\n## Determining which name is displayed\\n In general when deciding which name to use in speech and thought bubbles MapTool will attempt to show the name associated with the following precedence \\n\\n 1. Token under the mouse with speech name(if player owns it or is GM)\\n 2. Impersonated Token with speech name\\n 3. The players name\\n \\n\\nBelow is a more detailed overview of the logic if you really want to know what it is.\\n\\n```mermaid\\nflowchart TD;\\n Start([Start]) --\x3e mouseOver{Mouse Over<br/>Token} --\x3e |Yes| isOwner{Player Owns}\\n mouseOver --\x3e |No| impersonated\\n isOwner --\x3e |No| impersonated{Token<br/> Impersonated?}\\n isOwner --\x3e |Yes| hasSpeechName{Has Speech<br/> Name}\\n hasSpeechName --\x3e |Yes| speechName[Use Token<br/>Speech Bubble Name]\\n hasSpeechName --\x3e |No| impersonated\\n impersonated --\x3e |No| playerName[Use Player Name]\\n impersonated --\x3e |Yes| impersonatedHasSpeech{Token Has<br/>Speech Name?}\\n impersonatedHasSpeech --\x3e |Yes| impersonatedSpeech[Use Impersonated<br/>Token Speech Name]\\n impersonatedHasSpeech --\x3e |No| playerName\\n```\\n\\nIf there are multiple tokens under the mouse (e.g. a Token Stack) and at least one has a speech name then the following logic will be used to determine which is used.\\n\\n```mermaid\\nflowchart TD;\\n  Start([Start]) --\x3e hasImpersonated{Token<br/> Impersonated?}\\n  hasImpersonated --\x3e |Yes| impersonatedUnder{Impersonated Token<br/>in Stack?}\\n  impersonatedUnder --\x3e |Yes| useImpersonated[Use Impersonated<br/>Token Speech Name]\\n  impersonatedUnder --\x3e |No| topHasSpeech\\n  hasImpersonated --\x3e |No| topHasSpeech{Top Token<br/>Has Speech Name?}\\n  topHasSpeech --\x3e |Yes| useTop[Use Top Token<br/>Speech Name]\\n  topHasSpeech --\x3e |No| useOther[Use Any Token<br/>in Stack<br/>Speech Name]\\n```"}]}')}}]);